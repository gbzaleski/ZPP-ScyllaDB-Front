{"version":3,"sources":["components/TerminalHistory.tsx","components/Terminal.tsx","App.tsx","index.tsx"],"names":["TerminalHistory","list","history","map","e","slice","Terminal","useState","command","setCommand","commandResult","setCommandResult","commandHistory","setCommandHistory","positionInHistory","setPositionInHistory","useEffect","receivedHistory","window","localStorage","getItem","parsedReceivedHistory","JSON","parse","length","setItem","stringify","listener","event","code","prevState","document","addEventListener","removeEventListener","debugPanel","toString","type","value","onChange","target","App","ReactDOM","getElementById"],"mappings":"6KAaeA,MAPf,YACC,IACSC,EADV,EAD2BC,QAEFC,KAAI,SAAAC,GAAC,OAAIA,EAAI,8BAAMA,IAAW,uCAEnD,OAAO,8BAAMH,EAAKI,OAAO,OC0FdC,MA/Ff,WACI,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA4CJ,mBAAwB,IAApE,mBAAOK,EAAP,KAAuBC,EAAvB,KACA,EAAkDN,mBAAS,GAA3D,mBAAOO,EAAP,KAA0BC,EAA1B,KAOAC,qBAAU,WACN,IAAIC,EAAkBC,OAAOC,aAAaC,QAAQ,kBAElD,GAA+B,kBAApBH,EAA8B,CACrC,IAAII,EAAwBC,KAAKC,MAAMN,GACvCJ,EAAkBQ,GAClBN,EAAqBM,EAAsBG,aAE3CX,EAAkB,IAClBE,EAAqB,KAE1B,IAGHC,qBAAU,WACNE,OAAOC,aAAaM,QAAQ,iBAAkBH,KAAKI,UAAUd,MAC9D,CAACA,IAGJI,qBAAU,WACN,IAAMW,EAAW,SAACC,GACd,OAAQA,EAAMC,MAEV,IAAK,QACDlB,EAAiBH,GACjBK,GAAkB,SAACiB,GAAD,4BAAkCA,GAAlC,CAA6CtB,OAC/DC,EAAW,IACX,MAGJ,IAAK,YACGK,EAAoBF,EAAeY,SACnCT,GAAqB,SAAAe,GAAS,OAAIA,EAAY,KAG1ChB,EAAoB,GAAKF,EAAeY,OACxCf,EAAW,IAEXA,EAAWG,EAAeE,EAAoB,KAGtD,MAGJ,IAAK,UACGA,EAAoB,IAEpBC,GAAqB,SAAAe,GAAS,OAAIA,EAAY,KAC9CrB,EAAWG,EAAeE,EAAoB,OAQ9D,OAHAiB,SAASC,iBAAiB,UAAWL,GAG9B,WACHI,SAASE,oBAAoB,UAAWN,MAE7C,CAACnB,EAASI,EAAgBE,IAE7B,IAAMoB,EAAc,qCACZ,uBADY,SAEX1B,EAAQ,uBACRE,EAAc,uBACdE,EAAeuB,WAAW,uBAC1BrB,EAAkB,0BAI3B,OACI,kCACI,gCACI,cAAC,EAAD,CACIZ,QAASU,IAEb,0BAEJ,uBAAOwB,KAAK,OAAOC,MAAO7B,EAAS8B,SAnFrB,SAACV,GACnBnB,EAAWmB,EAAMW,OAAOF,UAmFJH,MCvFbM,MANf,WACI,OACI,cAAC,EAAD,KCARC,SACI,8BACI,cAAC,EAAD,MAEJV,SAASW,eAAe,W","file":"static/js/main.add1478f.chunk.js","sourcesContent":["\ninterface TerminalHistoryProp \n{\n  history: string[];\n}\n\nfunction TerminalHistory({ history } : TerminalHistoryProp) : JSX.Element\n{\n    const list = history.map(e => e ? <div>{e}</div> : <div>_</div>)\n\n    return <div>{list.slice(-10)}</div>;\n}\n\nexport default TerminalHistory","import React, {useEffect, useState} from \"react\";\nimport TerminalHistory from \"./TerminalHistory\";\n\nconst debugStatus:boolean = true;\n\nfunction Terminal() {\n    const [command, setCommand] = useState(\"\");\n    const [commandResult, setCommandResult] = useState(\"\");\n    const [commandHistory, setCommandHistory] = useState<Array<string>>([]);\n    const [positionInHistory, setPositionInHistory] = useState(0);\n\n    const changeCommand = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCommand(event.target.value);\n    }\n\n    // Retrieving previously used commands from the localStorage\n    useEffect(() => {\n        let receivedHistory = window.localStorage.getItem('commandHistory');\n\n        if (typeof receivedHistory === \"string\") {\n            let parsedReceivedHistory = JSON.parse(receivedHistory);\n            setCommandHistory(parsedReceivedHistory);\n            setPositionInHistory(parsedReceivedHistory.length);\n        } else {\n            setCommandHistory([]);\n            setPositionInHistory(0);\n        }\n    }, [])\n\n    // Updating command history in the localStorage\n    useEffect(() => {\n        window.localStorage.setItem('commandHistory', JSON.stringify(commandHistory));\n    }, [commandHistory]);\n\n    // Creating keylogger\n    useEffect(() => {\n        const listener = (event: KeyboardEvent)  => {\n            switch (event.code) {\n                // When the Enter key is pressed command is executed and saved in the command history\n                case \"Enter\":\n                    setCommandResult(command);\n                    setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                    setCommand(\"\");\n                    break;\n\n                // When the ArrowDown key is pressed we move up in the command history\n                case \"ArrowDown\":\n                    if (positionInHistory < commandHistory.length) {\n                        setPositionInHistory(prevState => prevState + 1);\n\n                        // Dependently on position command is either retrieved from history or empty\n                        if (positionInHistory + 1 == commandHistory.length) {\n                            setCommand(\"\")\n                        } else {\n                            setCommand(commandHistory[positionInHistory + 1]);\n                        }\n                    }\n                    break;\n\n                // When the ArrowUp key is pressed we move down in the command history\n                case \"ArrowUp\":\n                    if (positionInHistory > 0) \n                    {\n                        setPositionInHistory(prevState => prevState - 1);\n                        setCommand(commandHistory[positionInHistory - 1]);\n                    }\n                    break;\n            }\n        };\n        document.addEventListener(\"keydown\", listener);\n\n        // When the component is about to get destroyed listener gets removed\n        return () => {\n            document.removeEventListener(\"keydown\", listener);\n        };\n    }, [command, commandHistory, positionInHistory]);\n\n    const debugPanel = (<>\n            <hr></hr>State:\n            {command}<br/>\n            {commandResult}<br/>\n            {commandHistory.toString()}<br/>\n            {positionInHistory}<br/>\n        </>\n        )\n\n    return (\n        <label>\n            <div>\n                <TerminalHistory \n                    history={commandHistory}\n                />\n                <hr></hr>\n            </div>\n            <input type=\"text\" value={command} onChange={changeCommand} />\n            {debugStatus && debugPanel}\n        </label>\n    );\n}\n\nexport default Terminal;","import Terminal from \"./components/Terminal\";\n\nfunction App() {\n    return (\n        <Terminal/>\n    );\n}\n\nexport default App;","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <div>\n        <App/>\n    </div>,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}