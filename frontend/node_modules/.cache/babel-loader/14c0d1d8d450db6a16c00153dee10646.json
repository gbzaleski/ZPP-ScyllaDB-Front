{"ast":null,"code":"var _jsxFileName = \"/home/gbz/ZPP/ZPP-ScyllaDB-Front/frontend/src/components/Terminal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport TerminalHistory from \"./TerminalHistory\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst debugStatus = true;\n\nfunction Terminal() {\n  _s();\n\n  const [command, setCommand] = useState(\"\");\n  const [commandResult, setCommandResult] = useState(\"\");\n  const [commandHistory, setCommandHistory] = useState([]);\n  const [positionInHistory, setPositionInHistory] = useState(0);\n  const webSocket = useRef();\n\n  const init = () => {\n    // Create WebSocket connection.\n    webSocket.current = new WebSocket('ws://localhost:8222');\n    console.log(webSocket.current); // Connection opened\n\n    webSocket.current.addEventListener('open', function (event) {\n      console.log('Connected to the WS Server!');\n    }); // Connection closed\n\n    webSocket.current.addEventListener('close', function (event) {\n      console.log('Disconnected from the WS Server!');\n    }); // Listen for messages\n\n    webSocket.current.addEventListener('message', function (event) {\n      console.log('Message from server ', event.data);\n    });\n  };\n\n  useEffect(() => {\n    init();\n  }, []); // Send a msg to the websocket\n\n  const sendMsg = msg => {\n    webSocket.current.send(msg);\n  };\n\n  const changeCommand = event => {\n    setCommand(event.target.value);\n  }; // Retrieving previously used commands from the localStorage\n\n\n  useEffect(() => {\n    let receivedHistory = window.localStorage.getItem('commandHistory');\n\n    if (typeof receivedHistory === \"string\") {\n      let parsedReceivedHistory = JSON.parse(receivedHistory);\n      setCommandHistory(parsedReceivedHistory);\n      setPositionInHistory(parsedReceivedHistory.length);\n    } else {\n      setCommandHistory([]);\n      setPositionInHistory(0);\n    }\n  }, []); // Updating command history in the localStorage\n\n  useEffect(() => {\n    window.localStorage.setItem('commandHistory', JSON.stringify(commandHistory));\n  }, [commandHistory]); // Creating keylogger\n\n  useEffect(() => {\n    const listener = event => {\n      switch (event.code) {\n        // When the Enter key is pressed command is executed and saved in the command history\n        case \"Enter\":\n          setCommandResult(command);\n          sendMsg(command);\n          setCommandHistory(prevState => [...prevState, command]);\n          setCommand(\"\");\n          break;\n        // When the ArrowDown key is pressed we move up in the command history\n\n        case \"ArrowDown\":\n          if (positionInHistory < commandHistory.length) {\n            setPositionInHistory(prevState => prevState + 1); // Dependently on position command is either retrieved from history or empty\n\n            if (positionInHistory + 1 == commandHistory.length) {\n              setCommand(\"\");\n            } else {\n              setCommand(commandHistory[positionInHistory + 1]);\n            }\n          }\n\n          break;\n        // When the ArrowUp key is pressed we move down in the command history\n\n        case \"ArrowUp\":\n          if (positionInHistory > 0) {\n            setPositionInHistory(prevState => prevState - 1);\n            setCommand(commandHistory[positionInHistory - 1]);\n          }\n\n          break;\n      }\n    };\n\n    document.addEventListener(\"keydown\", listener); // When the component is about to get destroyed listener gets removed\n\n    return () => {\n      document.removeEventListener(\"keydown\", listener);\n    };\n  }, [command, commandHistory, positionInHistory]);\n\n  const debugPanel = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), \"State:\", command, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 22\n    }, this), commandResult, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 28\n    }, this), commandHistory.toString(), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 40\n    }, this), positionInHistory, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true);\n\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(TerminalHistory, {\n        history: commandHistory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: serverResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: command,\n      onChange: changeCommand\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), debugStatus && debugPanel]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Terminal, \"B+S5ZXlluBXEVVkEynH/RQiA1Go=\");\n\n_c = Terminal;\nexport default Terminal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Terminal\");","map":{"version":3,"sources":["/home/gbz/ZPP/ZPP-ScyllaDB-Front/frontend/src/components/Terminal.tsx"],"names":["React","useEffect","useState","useRef","TerminalHistory","debugStatus","Terminal","command","setCommand","commandResult","setCommandResult","commandHistory","setCommandHistory","positionInHistory","setPositionInHistory","webSocket","init","current","WebSocket","console","log","addEventListener","event","data","sendMsg","msg","send","changeCommand","target","value","receivedHistory","window","localStorage","getItem","parsedReceivedHistory","JSON","parse","length","setItem","stringify","listener","code","prevState","document","removeEventListener","debugPanel","toString","serverResponse"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,MAApC,QAAiD,OAAjD;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AAEA,MAAMC,WAAmB,GAAG,IAA5B;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAChB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAgB,EAAhB,CAApD;AACA,QAAM,CAACW,iBAAD,EAAoBC,oBAApB,IAA4CZ,QAAQ,CAAC,CAAD,CAA1D;AAEA,QAAMa,SAAa,GAAGZ,MAAM,EAA5B;;AACA,QAAMa,IAAI,GAAG,MAAM;AACf;AACAD,IAAAA,SAAS,CAACE,OAAV,GAAoB,IAAIC,SAAJ,CAAc,qBAAd,CAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,SAAS,CAACE,OAAtB,EAHe,CAKf;;AACAF,IAAAA,SAAS,CAACE,OAAV,CAAkBI,gBAAlB,CAAmC,MAAnC,EAA2C,UAAUC,KAAV,EAAuB;AAC9DH,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH,KAFD,EANe,CAUf;;AACAL,IAAAA,SAAS,CAACE,OAAV,CAAkBI,gBAAlB,CAAmC,OAAnC,EAA4C,UAAUC,KAAV,EAAsB;AAC9DH,MAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACH,KAFD,EAXe,CAef;;AACAL,IAAAA,SAAS,CAACE,OAAV,CAAkBI,gBAAlB,CAAmC,SAAnC,EAA8C,UAAUC,KAAV,EAAsB;AAChEH,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCE,KAAK,CAACC,IAA1C;AACH,KAFD;AAGH,GAnBD;;AAqBAtB,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,IAAI;AACL,GAFM,EAEJ,EAFI,CAAT,CA5BgB,CAgChB;;AACA,QAAMQ,OAAO,GAAIC,GAAD,IAAkB;AAC9BV,IAAAA,SAAS,CAACE,OAAV,CAAkBS,IAAlB,CAAuBD,GAAvB;AACH,GAFD;;AAIA,QAAME,aAAa,GAAIL,KAAD,IAAgD;AAClEd,IAAAA,UAAU,CAACc,KAAK,CAACM,MAAN,CAAaC,KAAd,CAAV;AACH,GAFD,CArCgB,CAyChB;;;AACA5B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI6B,eAAe,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,gBAA5B,CAAtB;;AAEA,QAAI,OAAOH,eAAP,KAA2B,QAA/B,EAAyC;AACrC,UAAII,qBAAqB,GAAGC,IAAI,CAACC,KAAL,CAAWN,eAAX,CAA5B;AACAlB,MAAAA,iBAAiB,CAACsB,qBAAD,CAAjB;AACApB,MAAAA,oBAAoB,CAACoB,qBAAqB,CAACG,MAAvB,CAApB;AACH,KAJD,MAIO;AACHzB,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAE,MAAAA,oBAAoB,CAAC,CAAD,CAApB;AACH;AACJ,GAXQ,EAWN,EAXM,CAAT,CA1CgB,CAuDhB;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACZ8B,IAAAA,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4B,gBAA5B,EAA8CH,IAAI,CAACI,SAAL,CAAe5B,cAAf,CAA9C;AACH,GAFQ,EAEN,CAACA,cAAD,CAFM,CAAT,CAxDgB,CA4DhB;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMuC,QAAQ,GAAIlB,KAAD,IAA2B;AACxC,cAAQA,KAAK,CAACmB,IAAd;AACI;AACA,aAAK,OAAL;AACI/B,UAAAA,gBAAgB,CAACH,OAAD,CAAhB;AACAiB,UAAAA,OAAO,CAACjB,OAAD,CAAP;AACAK,UAAAA,iBAAiB,CAAE8B,SAAD,IAA8B,CAAC,GAAGA,SAAJ,EAAenC,OAAf,CAA/B,CAAjB;AACAC,UAAAA,UAAU,CAAC,EAAD,CAAV;AACA;AAEJ;;AACA,aAAK,WAAL;AACI,cAAIK,iBAAiB,GAAGF,cAAc,CAAC0B,MAAvC,EAA+C;AAC3CvB,YAAAA,oBAAoB,CAAC4B,SAAS,IAAIA,SAAS,GAAG,CAA1B,CAApB,CAD2C,CAG3C;;AACA,gBAAI7B,iBAAiB,GAAG,CAApB,IAAyBF,cAAc,CAAC0B,MAA5C,EAAoD;AAChD7B,cAAAA,UAAU,CAAC,EAAD,CAAV;AACH,aAFD,MAEO;AACHA,cAAAA,UAAU,CAACG,cAAc,CAACE,iBAAiB,GAAG,CAArB,CAAf,CAAV;AACH;AACJ;;AACD;AAEJ;;AACA,aAAK,SAAL;AACI,cAAIA,iBAAiB,GAAG,CAAxB,EACA;AACIC,YAAAA,oBAAoB,CAAC4B,SAAS,IAAIA,SAAS,GAAG,CAA1B,CAApB;AACAlC,YAAAA,UAAU,CAACG,cAAc,CAACE,iBAAiB,GAAG,CAArB,CAAf,CAAV;AACH;;AACD;AA9BR;AAgCH,KAjCD;;AAkCA8B,IAAAA,QAAQ,CAACtB,gBAAT,CAA0B,SAA1B,EAAqCmB,QAArC,EAnCY,CAqCZ;;AACA,WAAO,MAAM;AACTG,MAAAA,QAAQ,CAACC,mBAAT,CAA6B,SAA7B,EAAwCJ,QAAxC;AACH,KAFD;AAGH,GAzCQ,EAyCN,CAACjC,OAAD,EAAUI,cAAV,EAA0BE,iBAA1B,CAzCM,CAAT;;AA2CA,QAAMgC,UAAU,gBAAI;AAAA,4BACZ;AAAA;AAAA;AAAA;AAAA,YADY,YAEXtC,OAFW,eAEH;AAAA;AAAA;AAAA;AAAA,YAFG,EAGXE,aAHW,eAGG;AAAA;AAAA;AAAA;AAAA,YAHH,EAIXE,cAAc,CAACmC,QAAf,EAJW,eAIe;AAAA;AAAA;AAAA;AAAA,YAJf,EAKXjC,iBALW,eAKO;AAAA;AAAA;AAAA;AAAA,YALP;AAAA,kBAApB;;AASA,sBACI;AAAA,4BACI;AAAA,8BACI,QAAC,eAAD;AACI,QAAA,OAAO,EAAEF;AADb;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAA,kBAAMoC;AAAN;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAQI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAExC,OAA1B;AAAmC,MAAA,QAAQ,EAAEoB;AAA7C;AAAA;AAAA;AAAA;AAAA,YARJ,EASKtB,WAAW,IAAIwC,UATpB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;GA9HQvC,Q;;KAAAA,Q;AAgIT,eAAeA,QAAf","sourcesContent":["import React, {useEffect, useState, useRef} from \"react\";\nimport TerminalHistory from \"./TerminalHistory\";\n\nconst debugStatus:boolean = true;\n\nfunction Terminal() {\n    const [command, setCommand] = useState(\"\");\n    const [commandResult, setCommandResult] = useState(\"\");\n    const [commandHistory, setCommandHistory] = useState<Array<string>>([]);\n    const [positionInHistory, setPositionInHistory] = useState(0);\n\n    const webSocket:any = useRef();\n    const init = () => {\n        // Create WebSocket connection.\n        webSocket.current = new WebSocket('ws://localhost:8222');\n        console.log(webSocket.current)\n\n        // Connection opened\n        webSocket.current.addEventListener('open', function (event : any) {\n            console.log('Connected to the WS Server!')\n        });\n\n        // Connection closed\n        webSocket.current.addEventListener('close', function (event: any) {\n            console.log('Disconnected from the WS Server!')\n        });\n\n        // Listen for messages\n        webSocket.current.addEventListener('message', function (event: any) {\n            console.log('Message from server ', event.data);\n        });    \n    }\n\n    useEffect(() => {\n        init();\n      }, []);\n\n    // Send a msg to the websocket\n    const sendMsg = (msg : string) => {\n        webSocket.current.send(msg);\n    }\n\n    const changeCommand = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCommand(event.target.value);\n    }\n\n    // Retrieving previously used commands from the localStorage\n    useEffect(() => {\n        let receivedHistory = window.localStorage.getItem('commandHistory');\n\n        if (typeof receivedHistory === \"string\") {\n            let parsedReceivedHistory = JSON.parse(receivedHistory);\n            setCommandHistory(parsedReceivedHistory);\n            setPositionInHistory(parsedReceivedHistory.length);\n        } else {\n            setCommandHistory([]);\n            setPositionInHistory(0);\n        }\n    }, [])\n\n    // Updating command history in the localStorage\n    useEffect(() => {\n        window.localStorage.setItem('commandHistory', JSON.stringify(commandHistory));\n    }, [commandHistory]);\n\n    // Creating keylogger\n    useEffect(() => {\n        const listener = (event: KeyboardEvent)  => {\n            switch (event.code) {\n                // When the Enter key is pressed command is executed and saved in the command history\n                case \"Enter\":\n                    setCommandResult(command);\n                    sendMsg(command);\n                    setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                    setCommand(\"\");\n                    break;\n\n                // When the ArrowDown key is pressed we move up in the command history\n                case \"ArrowDown\":\n                    if (positionInHistory < commandHistory.length) {\n                        setPositionInHistory(prevState => prevState + 1);\n\n                        // Dependently on position command is either retrieved from history or empty\n                        if (positionInHistory + 1 == commandHistory.length) {\n                            setCommand(\"\")\n                        } else {\n                            setCommand(commandHistory[positionInHistory + 1]);\n                        }\n                    }\n                    break;\n\n                // When the ArrowUp key is pressed we move down in the command history\n                case \"ArrowUp\":\n                    if (positionInHistory > 0) \n                    {\n                        setPositionInHistory(prevState => prevState - 1);\n                        setCommand(commandHistory[positionInHistory - 1]);\n                    }\n                    break;\n            }\n        };\n        document.addEventListener(\"keydown\", listener);\n\n        // When the component is about to get destroyed listener gets removed\n        return () => {\n            document.removeEventListener(\"keydown\", listener);\n        };\n    }, [command, commandHistory, positionInHistory]);\n\n    const debugPanel = (<>\n            <hr></hr>State:\n            {command}<br/>\n            {commandResult}<br/>\n            {commandHistory.toString()}<br/>\n            {positionInHistory}<br/>\n        </>\n        )\n\n    return (\n        <label>\n            <div>\n                <TerminalHistory \n                    history={commandHistory}\n                />\n                <div>{serverResponse}</div>\n                <hr></hr>\n            </div>\n            <input type=\"text\" value={command} onChange={changeCommand} />\n            {debugStatus && debugPanel}\n        </label>\n    );\n}\n\nexport default Terminal;"]},"metadata":{},"sourceType":"module"}