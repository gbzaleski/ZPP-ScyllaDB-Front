{"ast":null,"code":"var _jsxFileName = \"/home/gbz/ZPP/ZPP-ScyllaDB-Front/frontend/src/components/Terminal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Terminal() {\n  _s();\n\n  const [command, setCommand] = useState(\"\");\n  const [commandResult, setCommandResult] = useState(\"\");\n  const [commandHistory, setCommandHistory] = useState([]);\n  const [positionInHistory, setPositionInHistory] = useState(0);\n\n  const changeCommand = event => {\n    setCommand(event.target.value);\n  }; // Retrieving previously used commands from the localStorage\n\n\n  useEffect(() => {\n    let receivedHistory = window.localStorage.getItem('commandHistory');\n\n    if (typeof receivedHistory === \"string\") {\n      let parsedReceivedHistory = JSON.parse(receivedHistory);\n      setCommandHistory(parsedReceivedHistory);\n      setPositionInHistory(parsedReceivedHistory.length);\n    } else {\n      setCommandHistory([]);\n      setPositionInHistory(0);\n    }\n  }, []); // Updating command history in the localStorage\n\n  useEffect(() => {\n    window.localStorage.setItem('commandHistory', JSON.stringify(commandHistory));\n  }, [commandHistory]); // Creating keylogger\n\n  useEffect(() => {\n    const listener = event => {\n      switch (event.code) {\n        // When the Enter key is pressed command is executed and saved in the command history\n        case \"Enter\":\n          setCommandResult(command);\n          setCommandHistory(prevState => [...prevState, command]);\n          setCommand(\"\");\n          break;\n        // When the ArrowDown key is pressed we move up in the command history\n\n        case \"ArrowDown\":\n          if (positionInHistory < commandHistory.length) {\n            setPositionInHistory(prevState => prevState + 1); // Dependently on position command is either retrieved from history or empty\n\n            if (positionInHistory + 1 == commandHistory.length) {\n              setCommand(\"\");\n            } else {\n              setCommand(commandHistory[positionInHistory + 1]);\n            }\n          }\n\n          break;\n        // When the ArrowUp key is pressed we move down in the command history\n\n        case \"ArrowUp\":\n          if (positionInHistory > 0) {\n            setPositionInHistory(prevState => prevState - 1);\n            setCommand(commandHistory[positionInHistory - 1]);\n          }\n\n          break;\n      }\n    };\n\n    document.addEventListener(\"keydown\", listener); // When the component is about to get destroyed listener gets removed\n\n    return () => {\n      document.removeEventListener(\"keydown\", listener);\n    };\n  }, [command, commandHistory, positionInHistory]);\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: command,\n      onChange: changeCommand\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: commandResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Terminal, \"5vR5ukET096skHnMKBzkVm7eLhs=\");\n\n_c = Terminal;\nexport default Terminal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Terminal\");","map":{"version":3,"sources":["/home/gbz/ZPP/ZPP-ScyllaDB-Front/frontend/src/components/Terminal.tsx"],"names":["React","useEffect","useState","Terminal","command","setCommand","commandResult","setCommandResult","commandHistory","setCommandHistory","positionInHistory","setPositionInHistory","changeCommand","event","target","value","receivedHistory","window","localStorage","getItem","parsedReceivedHistory","JSON","parse","length","setItem","stringify","listener","code","prevState","document","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\n\nfunction Terminal() {\n    const [command, setCommand] = useState(\"\");\n    const [commandResult, setCommandResult] = useState(\"\");\n    const [commandHistory, setCommandHistory] = useState<Array<string>>([]);\n    const [positionInHistory, setPositionInHistory] = useState(0);\n\n    const changeCommand = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCommand(event.target.value);\n    }\n\n    // Retrieving previously used commands from the localStorage\n    useEffect(() => {\n        let receivedHistory = window.localStorage.getItem('commandHistory');\n\n        if (typeof receivedHistory === \"string\") {\n            let parsedReceivedHistory = JSON.parse(receivedHistory);\n            setCommandHistory(parsedReceivedHistory);\n            setPositionInHistory(parsedReceivedHistory.length);\n        } else {\n            setCommandHistory([]);\n            setPositionInHistory(0);\n        }\n    },[])\n\n    // Updating command history in the localStorage\n    useEffect(() => {\n        window.localStorage.setItem('commandHistory', JSON.stringify(commandHistory));\n    }, [commandHistory]);\n\n    // Creating keylogger\n    useEffect(() => {\n        const listener = (event: KeyboardEvent)  => {\n            switch (event.code) {\n                // When the Enter key is pressed command is executed and saved in the command history\n                case \"Enter\":\n                    setCommandResult(command);\n                    setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                    setCommand(\"\");\n                    break;\n                // When the ArrowDown key is pressed we move up in the command history\n                case \"ArrowDown\":\n                    if (positionInHistory < commandHistory.length) {\n                        setPositionInHistory(prevState => prevState + 1);\n\n                        // Dependently on position command is either retrieved from history or empty\n                        if (positionInHistory + 1 == commandHistory.length) {\n                            setCommand(\"\")\n                        } else {\n                            setCommand(commandHistory[positionInHistory + 1]);\n                        }\n                    }\n                    break;\n                // When the ArrowUp key is pressed we move down in the command history\n                case \"ArrowUp\":\n                    if (positionInHistory > 0) {\n                        setPositionInHistory(prevState => prevState - 1);\n                        setCommand(commandHistory[positionInHistory - 1]);\n                    }\n                    break;\n            }\n        };\n        document.addEventListener(\"keydown\", listener);\n        // When the component is about to get destroyed listener gets removed\n        return () => {\n            document.removeEventListener(\"keydown\", listener);\n        };\n    }, [command, commandHistory, positionInHistory]);\n\n    return (\n        <label>\n            <input type=\"text\" value={command} onChange={changeCommand} />\n            <div>\n                {commandResult}\n            </div>\n        </label>\n    );\n}\n\nexport default Terminal;"]},"metadata":{},"sourceType":"module"}