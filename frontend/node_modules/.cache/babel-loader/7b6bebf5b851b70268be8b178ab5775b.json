{"ast":null,"code":"import _toConsumableArray from\"/home/gbz/ZPP/ZPP-ScyllaDB-Front/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/gbz/ZPP/ZPP-ScyllaDB-Front/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import TerminalHistory from\"./TerminalHistory\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var debugStatus=true;function Terminal(){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),command=_useState2[0],setCommand=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),commandResult=_useState4[0],setCommandResult=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),commandHistory=_useState6[0],setCommandHistory=_useState6[1];var _useState7=useState(0),_useState8=_slicedToArray(_useState7,2),positionInHistory=_useState8[0],setPositionInHistory=_useState8[1];var changeCommand=function changeCommand(event){setCommand(event.target.value);};// Retrieving previously used commands from the localStorage\nuseEffect(function(){var receivedHistory=window.localStorage.getItem('commandHistory');if(typeof receivedHistory===\"string\"){var parsedReceivedHistory=JSON.parse(receivedHistory);setCommandHistory(parsedReceivedHistory);setPositionInHistory(parsedReceivedHistory.length);}else{setCommandHistory([]);setPositionInHistory(0);}},[]);// Updating command history in the localStorage\nuseEffect(function(){window.localStorage.setItem('commandHistory',JSON.stringify(commandHistory));},[commandHistory]);// Creating keylogger\nuseEffect(function(){var listener=function listener(event){switch(event.code){// When the Enter key is pressed command is executed and saved in the command history\ncase\"Enter\":setCommandResult(command);setCommandHistory(function(prevState){return[].concat(_toConsumableArray(prevState),[command]);});setCommand(\"\");break;// When the ArrowDown key is pressed we move up in the command history\ncase\"ArrowDown\":if(positionInHistory<commandHistory.length){setPositionInHistory(function(prevState){return prevState+1;});// Dependently on position command is either retrieved from history or empty\nif(positionInHistory+1==commandHistory.length){setCommand(\"\");}else{setCommand(commandHistory[positionInHistory+1]);}}break;// When the ArrowUp key is pressed we move down in the command history\ncase\"ArrowUp\":if(positionInHistory>0){setPositionInHistory(function(prevState){return prevState-1;});setCommand(commandHistory[positionInHistory-1]);}break;}};document.addEventListener(\"keydown\",listener);// When the component is about to get destroyed listener gets removed\nreturn function(){document.removeEventListener(\"keydown\",listener);};},[command,commandHistory,positionInHistory]);var debugPanel=/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"hr\",{}),\"State:\",command,/*#__PURE__*/_jsx(\"br\",{}),commandResult,/*#__PURE__*/_jsx(\"br\",{}),commandHistory.toString(),/*#__PURE__*/_jsx(\"br\",{}),positionInHistory,/*#__PURE__*/_jsx(\"br\",{})]});return/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(TerminalHistory,{history:commandHistory}),/*#__PURE__*/_jsx(\"hr\",{})]}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:command,onChange:changeCommand}),debugStatus&&debugPanel]});}export default Terminal;","map":{"version":3,"sources":["/home/gbz/ZPP/ZPP-ScyllaDB-Front/frontend/src/components/Terminal.tsx"],"names":["React","useEffect","useState","TerminalHistory","debugStatus","Terminal","command","setCommand","commandResult","setCommandResult","commandHistory","setCommandHistory","positionInHistory","setPositionInHistory","changeCommand","event","target","value","receivedHistory","window","localStorage","getItem","parsedReceivedHistory","JSON","parse","length","setItem","stringify","listener","code","prevState","document","addEventListener","removeEventListener","debugPanel","toString"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport TerminalHistory from \"./TerminalHistory\";\n\nconst debugStatus:boolean = true;\n\nfunction Terminal() {\n    const [command, setCommand] = useState(\"\");\n    const [commandResult, setCommandResult] = useState(\"\");\n    const [commandHistory, setCommandHistory] = useState<Array<string>>([]);\n    const [positionInHistory, setPositionInHistory] = useState(0);\n\n    const changeCommand = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCommand(event.target.value);\n    }\n\n    // Retrieving previously used commands from the localStorage\n    useEffect(() => {\n        let receivedHistory = window.localStorage.getItem('commandHistory');\n\n        if (typeof receivedHistory === \"string\") {\n            let parsedReceivedHistory = JSON.parse(receivedHistory);\n            setCommandHistory(parsedReceivedHistory);\n            setPositionInHistory(parsedReceivedHistory.length);\n        } else {\n            setCommandHistory([]);\n            setPositionInHistory(0);\n        }\n    }, [])\n\n    // Updating command history in the localStorage\n    useEffect(() => {\n        window.localStorage.setItem('commandHistory', JSON.stringify(commandHistory));\n    }, [commandHistory]);\n\n    // Creating keylogger\n    useEffect(() => {\n        const listener = (event: KeyboardEvent)  => {\n            switch (event.code) {\n                // When the Enter key is pressed command is executed and saved in the command history\n                case \"Enter\":\n                    setCommandResult(command);\n                    setCommandHistory((prevState: Array<string>) => [...prevState, command]);\n                    setCommand(\"\");\n                    break;\n\n                // When the ArrowDown key is pressed we move up in the command history\n                case \"ArrowDown\":\n                    if (positionInHistory < commandHistory.length) {\n                        setPositionInHistory(prevState => prevState + 1);\n\n                        // Dependently on position command is either retrieved from history or empty\n                        if (positionInHistory + 1 == commandHistory.length) {\n                            setCommand(\"\")\n                        } else {\n                            setCommand(commandHistory[positionInHistory + 1]);\n                        }\n                    }\n                    break;\n\n                // When the ArrowUp key is pressed we move down in the command history\n                case \"ArrowUp\":\n                    if (positionInHistory > 0) \n                    {\n                        setPositionInHistory(prevState => prevState - 1);\n                        setCommand(commandHistory[positionInHistory - 1]);\n                    }\n                    break;\n            }\n        };\n        document.addEventListener(\"keydown\", listener);\n\n        // When the component is about to get destroyed listener gets removed\n        return () => {\n            document.removeEventListener(\"keydown\", listener);\n        };\n    }, [command, commandHistory, positionInHistory]);\n\n    const debugPanel = (<>\n            <hr></hr>State:\n            {command}<br/>\n            {commandResult}<br/>\n            {commandHistory.toString()}<br/>\n            {positionInHistory}<br/>\n        </>\n        )\n\n    return (\n        <label>\n            <div>\n                <TerminalHistory \n                    history={commandHistory}\n                />\n                <hr></hr>\n            </div>\n            <input type=\"text\" value={command} onChange={changeCommand} />\n            {debugStatus && debugPanel}\n        </label>\n    );\n}\n\nexport default Terminal;"]},"metadata":{},"sourceType":"module"}